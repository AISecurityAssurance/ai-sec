version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: secanalyst
      POSTGRES_PASSWORD: secanalyst123
      POSTGRES_DB: security_analyst_test
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secanalyst"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.dev
    environment:
      DATABASE_URL: postgresql+asyncpg://secanalyst:secanalyst123@postgres:5432/security_analyst_test
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: test-secret-key-change-in-production
      ENVIRONMENT: development
      CORS_ORIGINS: '["http://localhost:3000", "http://frontend:3000"]'
      # LLM API Keys (set these in .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./apps/backend:/app
      - ./apps/backend/prompts:/app/prompts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Running migrations...' &&
        alembic upgrade head &&
        echo 'Starting server...' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend Application
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.dev
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev

volumes:
  postgres_test_data: